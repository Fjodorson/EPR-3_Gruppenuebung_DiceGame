Aufgabe 3.3: 
Implementierung 
Punkte:   / 13 
Implementieren Sie dieses Spiel! 


(a) 
(4 Punkte) Implementieren Sie eine Funktion roll dice(number=1, faces=6, seed=None). 
Diese Funktion gibt einen String zuruck, in dem die gewurfelten Zahlen im Intervall [1..faces] durch Komma getrennt stehen. 
Es wird mit number Wurfeln (number im Intervall [1,10]) gewurfelt, je mit faces Flachen. 
faces ist aus dem Intervall [2,100] zu wahlen. 
Bei jedem W¨urfel soll die Verteilung der Zahlen moglichst gleichverteilt sein und im Intervall [1,faces] liegen. 
seed ist eine Float-Zahl, die dem Quasi-Zufallszahlen Generator von Python als Parameter ubergeben wird. 
Dies wird genutzt, um Wurfelergebnisse wiederholbar (d.h. reproduzierbar) zu machen. 

------------------------------------------------------------------------------------------------
#  Import module necessary for the RNG
import random
#  User input to initiate the iterations
next_roll = input("Bitte druecke N für ein Spiel mit maximal 10 Wuerfen. ")

def roll_dice(numbers, faces=6, seed=None):
    """Rolls the dice.

    numbers is amount of rolls.
    round_of_rolls is the actual iteration the player is in.
    faces is number of sides of the die.
    seed is baseline value to check pseudo-random."""

    #  Starting value for iterations. The counter for the while-loop.
    round_of_rolls = 0
    #  Sum of all consecutive iterations.
    roll_total = 0
    #  while loop to set the number of iterations.
    while round_of_rolls < numbers:
        #  Faces of the die. faces+1 due to the way range counts.
        #  List created to enable random.choice.
        die_faces = list(range(1, faces+1, 1))
        #  TODO: Not sure how to implement seed=None.
        seed = None
        #  The result of the current iteration's roll.
        #  Done by randomly choosing an item in the list die_faces.
        roll_result = random.choice(die_faces)
        #  Updating the counter.
        round_of_rolls += 1
        #  Assigning strings to variables to shorten the line-length one below.
        player_roll = "Der Spieler hat bei Wurf"
        #  Printing the result of the current roll.
        print(player_roll, round_of_rolls, "eine", roll_result, "gewuerfelt!")
        #  Updating the player's current total.
        roll_total += roll_result
        #  Printing the player's current total.
        print("Insgesamt macht das", roll_total, "Augen")
        #  If-condition that specifies the lose-condition of the game.
        if roll_total >= 16:
            #  Game Over message.
            print("Du hast verloren!")
            #  End loop.
            break
    #  TODO: not sure if this is necessary in this specific instance.
    #  TODO: return allows to use the last value for further operations.
    #  TODO: Definitely necessary for the actual game because the player can
    #  TODO: choose to continue or stop.
    return roll_result

#  If-condition for call to function
if next_roll == "n":
    #  Current test-parameters for numbers and faces.
    roll_dice(10, 6)
#  Else-condition in case the user fails hard.
else:
    print("Du musst schon N druecken!")
--------------------------------------------------------------------------------------------------------




(b) 
(4 Punkte) Implementieren Sie eine Funktion roll cheating dice(). 
Modifizieren Sie dabei den Wurfelwurf eines elektronischen Wurfel mit 6 Flachen (nur diesen!) so, 
dass die Zahl 3 relativ mit der doppelten Wahrscheinlichkeit erscheint, wie die anderen funf Zahlen. 


(c) 
(5 Punkte) Implementieren Sie eine Funktion sixteen is dead(players), welche den Ablauf des gesamten Spiels implementiert. 
players bezeichnet dabei die Anzahl an Spielern
